networks:
  bots: {}

services:
  bot:
    networks: [bots]
    container_name: germ-bot
    depends_on:
      db-init:
        condition: service_completed_successfully
      jaeger-init:
        condition: service_completed_successfully
      otel-collector-init:
        condition: service_completed_successfully
      test:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: "germ:latest"
    volumes:
      - ./:/src:rw
    environment: &local-dev
      DB_HOST: &db-host germ-db
      HF_HOME: /src/data/huggingface
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      SKIP_TESTS: ${SKIP_TESTS}
    working_dir: /src
    command: [
      "gunicorn", "-c", "gunicorn_config.py", "bot.main:bot", "--bind", "0.0.0.0:8000"
    ]
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-s", "localhost:8000/healthz"]
      interval: 10s
      timeout: 9s
      retries: 6

  db:
    networks: [bots]
    container_name: *db-host
    image: postgres:16
    environment:
      POSTGRES_DB: germ
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}

  db-init:
    networks: [ bots ]
    container_name: germ-db-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      <<: *local-dev
      WAIT_FOR_AFTER_COMMAND: python -m db.models
      WAIT_FOR_HOST: *db-host
      WAIT_FOR_PORT: 5432
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  grafana:
    networks: [bots]
    container_name: germ-grafana
    depends_on:
      prometheus-init:
        condition: service_completed_successfully
    image: grafana/grafana:latest
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - "grafana-storage:/var/lib/grafana"
    environment:
      - GF_LOG_LEVEL=warn
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"

  # See: https://www.jaegertracing.io/docs/1.58/spm/#architecture
  jaeger:
    networks: [bots]
    container_name: &jaeger-host germ-jaeger
    depends_on:
      prometheus-init:
        condition: service_completed_successfully
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_GRPC_HOST_PORT=0.0.0.0:4317
      - COLLECTOR_OTLP_METRICS_ENABLED=true
      - LOG_LEVEL=warn
      #- LOG_LEVEL=info
      #- LOG_LEVEL=debug
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://germ-prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "16686:16686" # UI
      - "4317:4317" # OTLP over gRPC

  jaeger-init:
    networks: [ bots ]
    container_name: germ-jaeger-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *jaeger-host
      WAIT_FOR_PORT: 4317
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  # See: https://www.jaegertracing.io/docs/1.58/spm/#architecture
  prometheus:
    networks: [bots]
    container_name: &prometheus-host germ-prometheus
    depends_on:
      otel-collector-init:  # Scrapes otel-collector for span metrics
        condition: service_completed_successfully
    image: prom/prometheus:v2.52.0
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      #- --log.level=debug
      - --log.level=warn

  prometheus-init:
    networks: [ bots ]
    container_name: germ-prometheus-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *prometheus-host
      WAIT_FOR_PORT: 9090
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  # Has a loose dependency on jaeger - exports data to jaeger but not until bot is up.
  # See: https://www.jaegertracing.io/docs/1.58/spm/#architecture
  otel-collector:
    networks: [bots]
    container_name: &otel-collector-host germ-otel-collector
    image: otel/opentelemetry-collector-contrib:0.102.0
    volumes:
      - ./observability/otel-collector-config-connector.yml:/etc/otelcol/otel-collector-config.yml
    ports:
      - "4318:4318" # OTLP over HTTP
    command:
      - --config=/etc/otelcol/otel-collector-config.yml

  otel-collector-init:
    networks: [ bots ]
    container_name: germ-otel-collector-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *otel-collector-host
      WAIT_FOR_PORT: 4318
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  test:
    networks: [bots]
    container_name: germ-test
    links: [db, otel-collector]
    depends_on:
      db-init:
        condition: service_completed_successfully
      otel-collector-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: "germ:latest"
    volumes:
      - ./:/src
    environment: *local-dev
    working_dir: /src
    command: ["tests/run.sh"]

volumes:
  grafana-storage: {}