networks:
  bots: {}

volumes:
  bot-data: {}
  grafana-storage: {}

services:
  bot:
    networks: [bots]
    container_name: germ-bot
    depends_on:
      db-migrate:
        condition: service_completed_successfully
      jaeger-init:
        condition: service_completed_successfully
      prometheus-init:
        condition: service_completed_successfully
      test:
        condition: service_completed_successfully
    image: "germ:latest"
    volumes:
      - ./:/src:rw
      - bot-data:/var/lib/germ
    environment: &local-dev
      HF_HOME: &hf-home ${HF_HOME:-/src/data/huggingface}
      NEO4J_AUTH: &neo4j-auth neo4j/${NEO4J_PASSWORD:-Ma9icMicr0be}
      NEO4J_HOST: &neo4j-host germ-neo4j
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_CHAT_MODEL: ${OPENAI_CHAT_MODEL}
      OPENAI_IMAGE_MODEL: ${OPENAI_IMAGE_MODEL}
      OPENAI_MINI_MODEL: ${OPENAI_MINI_MODEL}
      OPENAI_REASONING_MODEL: ${OPENAI_REASONING_MODEL}
      PG_HOST: &pg-host germ-pg
      POSTGRES_PASSWORD: &pg-password ${POSTGRES_PASSWORD:-bacteria4life}
      POSTGRES_USER: &pg-user ${POSTGRES_USER:-germ}
    working_dir: /src
    command: [ "scripts/app-start.sh", "bot.main:bot", "8000" ]
    ports:
      - "8001:8000"
    healthcheck:
      test: [ "CMD", "curl", "-s", "localhost:8000/healthz" ]
      interval: 10s
      timeout: 9s
      retries: 6
    logging:  # Needs rotation due to verbosity
      driver: "json-file"
      options:
        max-size: "250m"
        max-file: "3"

  db-migrate:
    networks: [bots]
    container_name: germ-db-migrate
    depends_on:
      pg-init:
        condition: service_completed_successfully
      neo4j-init:
        condition: service_completed_successfully
    image: "germ-db-migrate:latest"
    build:
      context: .
      dockerfile: docker/db-migrate.Dockerfile
    volumes:
      - ./:/src
    environment:
      <<: *local-dev
      PGPASSWORD: ${POSTGRES_PASSWORD:-bacteria4life}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-Ma9icMicr0be}
    working_dir: /src
    command: [ "scripts/db-migrate.sh" ]

  grafana:
    networks: [bots]
    container_name: germ-grafana
    depends_on:
      prometheus-init:
        condition: service_completed_successfully
    image: grafana/grafana:latest
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - "grafana-storage:/var/lib/grafana"
    environment:
      - GF_LOG_LEVEL=warn
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"

  # See: https://www.jaegertracing.io/docs/1.58/spm/#architecture
  jaeger:
    networks: [bots]
    container_name: &jaeger-host germ-jaeger
    image: jaegertracing/jaeger:2.2.0
    ports:
      - "16686:16686" # UI
      - "4317:4317"   # OTLP over gRPC

  jaeger-init:
    networks: [bots]
    container_name: germ-jaeger-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *jaeger-host
      WAIT_FOR_PORT: 4317
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  models:
    networks: [bots]
    container_name: germ-models
    depends_on:
      jaeger-init:
        condition: service_completed_successfully
      prometheus-init:
        condition: service_completed_successfully
      test:
        condition: service_completed_successfully
    image: "germ:latest"
    volumes:
      - ./:/src:rw
    environment:
      HF_HOME: *hf-home
    working_dir: /src
    command: [ "scripts/app-start.sh", "models.main:model_service", "9000" ]
    ports:
      - "9001:9000"
    healthcheck:
      test: [ "CMD", "curl", "-s", "localhost:9000/healthz" ]
      interval: 10s
      timeout: 9s
      retries: 6

  neo4j:
    networks: [bots]
    container_name: *neo4j-host
    image: neo4j:latest
    volumes:
      - ./scripts/neo4j-start.sh:/neo4j-start.sh
      - ./database_dump/neo4j:/dump  # Persist data
    environment:
      NEO4J_AUTH: *neo4j-auth
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    command: [ "/neo4j-start.sh" ]

  neo4j-init:
    networks: [bots]
    container_name: germ-neo4j-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *neo4j-host
      WAIT_FOR_PORT: 7474
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  pg:
    networks: [bots]
    container_name: *pg-host
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: germ
      POSTGRES_PASSWORD: *pg-password
      POSTGRES_USER: *pg-user

  pg-init:
    networks: [bots]
    container_name: germ-pg-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      <<: *local-dev
      WAIT_FOR_HOST: *pg-host
      WAIT_FOR_PORT: 5432
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  # See: https://www.jaegertracing.io/docs/1.58/spm/#architecture
  prometheus:
    networks: [bots]
    container_name: &prometheus-host germ-prometheus
    image: prom/prometheus:v2.52.0
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      #- --log.level=debug
      - --log.level=warn

  prometheus-init:
    networks: [bots]
    container_name: germ-prometheus-init
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      WAIT_FOR_HOST: *prometheus-host
      WAIT_FOR_PORT: 9090
    working_dir: /src
    command: [ "scripts/wait-for-port-up.sh" ]

  redis:
    networks: [bots]
    container_name: germ-redis
    image: redis:latest
    ports:
      - "6379:6379"

  test:
    networks: [bots]
    container_name: germ-test
    depends_on:
      venv:
        condition: service_completed_successfully
    image: "germ:latest"
    volumes:
      - ./:/src
    environment:
      <<: *local-dev
      SKIP_INTEGRATION_TESTS: ${SKIP_INTEGRATION_TESTS:-true}
      SKIP_TESTS: ${SKIP_TESTS:-true}
    working_dir: /src
    command: ["tests/run.sh"]

  venv:
    networks: [bots]
    container_name: germ-venv
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    image: "germ:latest"
    volumes:
      - ./:/src
    working_dir: /src
    command: [ "scripts/venv.sh" ]
